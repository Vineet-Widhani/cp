int solve(int prev, int k, vector<vector<int>> &dp, int i, int n, vector<int> &a){
    if(k < 0)return 0;

    if(i >= n)return 0;

    if(dp[i][k])return dp[i][k];

//    dp[i][k] = max(solve(prev, k, dp, i + 1, n, a), 1 + solve(a[i], k - 1, dp, i + 1, n, a));

//    if(prev == -1){
//        dp[i][k] = max({dp[i][k], solve(prev, k, dp, i + 1, n, a), 1 + solve(a[i], k - 1, dp, i + 1, n, a)});
//    }
//    else{
        if(prev == a[i])dp[i][k] = max(dp[i][k], 1 + solve(prev, k, dp, i + 1, n, a));
        else{
            dp[i][k] = max({dp[i][k], solve(prev, k, dp, i + 1, n , a), 1 + solve(a[i], k - 1, dp, i + 1, n, a)});
        }
//    }
    return dp[i][k];
}

void test_case(){
    int n, k; cin >> n >> k;
    vector<int> a(n);
    for(int i = 0; i < n; ++i){
        cin >> a[i];
    }
    vector<vector<int>> dp(n, vector<int> (k + 1, 0));
    solve(-1, k, dp, 0, n, a);
    int ans = 0;
    for(int i = 0; i < n; ++i){
        for(int j = 0; j <= k; ++j){

            cout << dp[i][j] << " ";
            ans = max(ans, dp[i][j]);
        }
        cout << endl;
//        cout << dp[i][0] << " " << dp[i][1] << endl;;
    }
//    cout << endl;
    cout << ans << endl;
}