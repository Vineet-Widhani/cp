
bool prime[n + 1];

void SieveOfEratosthenes(int n)
{
    memset(prime, true, sizeof(prime));

    prime[1] = false;
    for (int p = 2; p * p <= n; p++)
    {
        if (prime[p] == true)
        {
            for (int i = p * p; i <= n; i += p)
                prime[i] = false;
        }
    }

}

int n; cin >> n;
    vector<int> m(n); for(auto &i : m) cin >> i;
    stack<pair<int, int>> left, right;
    int sum = 0;
    //first stores index and second stores sum
    //precompute value of left and right index in stack
    for(int i = 0; i < n; ++i){
        if(left.empty()){
            sum += m[i];
            left.push({i, sum});
        }
        else{
            pair<int, int> tp = left.top();
            if(m[tp.first] <= m[i]){
                pair<int, int> tmp = {i, tp.second + m[i]};
                left.push(tmp);
            }
            else{
                while (!left.empty() && m[left.top().first] > m[i]){
                    left.pop();
                }
                if(left.empty()){
                    pair<int, int> tmp = {i, (i + 1) * m[i]};
                    left.push(tmp);
                }
            }
        }
    }